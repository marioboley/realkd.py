<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="938" onload="init(evt)" viewBox="0 0 1200 938" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="938" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python test_all.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="927.00"> </text><svg id="frames" x="10" width="1180" total_samples="8489"><g><title>&lt;module&gt; (pandas/__init__.py:11) (16 samples, 0.19%)</title><rect x="0.0000%" y="164" width="0.1885%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="16"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (16 samples, 0.19%)</title><rect x="0.0000%" y="180" width="0.1885%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="16"/><text x="0.2500%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (15 samples, 0.18%)</title><rect x="0.0118%" y="196" width="0.1767%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="15"/><text x="0.2618%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (15 samples, 0.18%)</title><rect x="0.0118%" y="212" width="0.1767%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="15"/><text x="0.2618%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (15 samples, 0.18%)</title><rect x="0.0118%" y="228" width="0.1767%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="15"/><text x="0.2618%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 0.18%)</title><rect x="0.0118%" y="244" width="0.1767%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="15"/><text x="0.2618%" y="254.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:22) (9 samples, 0.11%)</title><rect x="0.2238%" y="164" width="0.1060%" height="15" fill="rgb(207,160,47)" fg:x="19" fg:w="9"/><text x="0.4738%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.11%)</title><rect x="0.2238%" y="180" width="0.1060%" height="15" fill="rgb(228,23,34)" fg:x="19" fg:w="9"/><text x="0.4738%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.11%)</title><rect x="0.2238%" y="196" width="0.1060%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="9"/><text x="0.4738%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.11%)</title><rect x="0.2238%" y="212" width="0.1060%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="9"/><text x="0.4738%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (9 samples, 0.11%)</title><rect x="0.2238%" y="228" width="0.1060%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="9"/><text x="0.4738%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.11%)</title><rect x="0.2238%" y="244" width="0.1060%" height="15" fill="rgb(240,193,28)" fg:x="19" fg:w="9"/><text x="0.4738%" y="254.50"></text></g><g><title>&lt;module&gt; (test_all.py:1) (41 samples, 0.48%)</title><rect x="0.0000%" y="68" width="0.4830%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="41"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (41 samples, 0.48%)</title><rect x="0.0000%" y="84" width="0.4830%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="41"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (41 samples, 0.48%)</title><rect x="0.0000%" y="100" width="0.4830%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="41"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (41 samples, 0.48%)</title><rect x="0.0000%" y="116" width="0.4830%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="41"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (41 samples, 0.48%)</title><rect x="0.0000%" y="132" width="0.4830%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="41"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (41 samples, 0.48%)</title><rect x="0.0000%" y="148" width="0.4830%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="41"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:48) (13 samples, 0.15%)</title><rect x="0.3298%" y="164" width="0.1531%" height="15" fill="rgb(221,200,47)" fg:x="28" fg:w="13"/><text x="0.5798%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (13 samples, 0.15%)</title><rect x="0.3298%" y="180" width="0.1531%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="13"/><text x="0.5798%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (13 samples, 0.15%)</title><rect x="0.3298%" y="196" width="0.1531%" height="15" fill="rgb(249,33,26)" fg:x="28" fg:w="13"/><text x="0.5798%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (13 samples, 0.15%)</title><rect x="0.3298%" y="212" width="0.1531%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="13"/><text x="0.5798%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (13 samples, 0.15%)</title><rect x="0.3298%" y="228" width="0.1531%" height="15" fill="rgb(221,5,38)" fg:x="28" fg:w="13"/><text x="0.5798%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 0.15%)</title><rect x="0.3298%" y="244" width="0.1531%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="13"/><text x="0.5798%" y="254.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:47) (9 samples, 0.11%)</title><rect x="0.3770%" y="260" width="0.1060%" height="15" fill="rgb(241,131,45)" fg:x="32" fg:w="9"/><text x="0.6270%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.11%)</title><rect x="0.3770%" y="276" width="0.1060%" height="15" fill="rgb(249,31,29)" fg:x="32" fg:w="9"/><text x="0.6270%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.11%)</title><rect x="0.3770%" y="292" width="0.1060%" height="15" fill="rgb(225,111,53)" fg:x="32" fg:w="9"/><text x="0.6270%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.11%)</title><rect x="0.3770%" y="308" width="0.1060%" height="15" fill="rgb(238,160,17)" fg:x="32" fg:w="9"/><text x="0.6270%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (9 samples, 0.11%)</title><rect x="0.3770%" y="324" width="0.1060%" height="15" fill="rgb(214,148,48)" fg:x="32" fg:w="9"/><text x="0.6270%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.11%)</title><rect x="0.3770%" y="340" width="0.1060%" height="15" fill="rgb(232,36,49)" fg:x="32" fg:w="9"/><text x="0.6270%" y="350.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (9 samples, 0.11%)</title><rect x="0.3770%" y="356" width="0.1060%" height="15" fill="rgb(209,103,24)" fg:x="32" fg:w="9"/><text x="0.6270%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.11%)</title><rect x="0.3770%" y="372" width="0.1060%" height="15" fill="rgb(229,88,8)" fg:x="32" fg:w="9"/><text x="0.6270%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.11%)</title><rect x="0.3770%" y="388" width="0.1060%" height="15" fill="rgb(213,181,19)" fg:x="32" fg:w="9"/><text x="0.6270%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.11%)</title><rect x="0.3770%" y="404" width="0.1060%" height="15" fill="rgb(254,191,54)" fg:x="32" fg:w="9"/><text x="0.6270%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (9 samples, 0.11%)</title><rect x="0.3770%" y="420" width="0.1060%" height="15" fill="rgb(241,83,37)" fg:x="32" fg:w="9"/><text x="0.6270%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.11%)</title><rect x="0.3770%" y="436" width="0.1060%" height="15" fill="rgb(233,36,39)" fg:x="32" fg:w="9"/><text x="0.6270%" y="446.50"></text></g><g><title>_can_coerce_all (numpy/core/numerictypes.py:582) (27 samples, 0.32%)</title><rect x="1.1427%" y="276" width="0.3181%" height="15" fill="rgb(226,3,54)" fg:x="97" fg:w="27"/><text x="1.3927%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (numpy/core/numerictypes.py:582) (16 samples, 0.19%)</title><rect x="1.2722%" y="292" width="0.1885%" height="15" fill="rgb(245,192,40)" fg:x="108" fg:w="16"/><text x="1.5222%" y="302.50"></text></g><g><title>find_common_type (numpy/core/numerictypes.py:652) (35 samples, 0.41%)</title><rect x="1.0602%" y="260" width="0.4123%" height="15" fill="rgb(238,167,29)" fg:x="90" fg:w="35"/><text x="1.3102%" y="270.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1085) (63 samples, 0.74%)</title><rect x="0.7539%" y="212" width="0.7421%" height="15" fill="rgb(232,182,51)" fg:x="64" fg:w="63"/><text x="1.0039%" y="222.50"></text></g><g><title>interleaved_dtype (pandas/core/internals/base.py:226) (62 samples, 0.73%)</title><rect x="0.7657%" y="228" width="0.7304%" height="15" fill="rgb(231,60,39)" fg:x="65" fg:w="62"/><text x="1.0157%" y="238.50"></text></g><g><title>find_common_type (pandas/core/dtypes/cast.py:1642) (42 samples, 0.49%)</title><rect x="1.0013%" y="244" width="0.4948%" height="15" fill="rgb(208,69,12)" fg:x="85" fg:w="42"/><text x="1.2513%" y="254.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1107) (10 samples, 0.12%)</title><rect x="1.5314%" y="212" width="0.1178%" height="15" fill="rgb(235,93,37)" fg:x="130" fg:w="10"/><text x="1.7814%" y="222.50"></text></g><g><title>fast_xs (pandas/core/internals/managers.py:1114) (11 samples, 0.13%)</title><rect x="1.7434%" y="212" width="0.1296%" height="15" fill="rgb(213,116,39)" fg:x="148" fg:w="11"/><text x="1.9934%" y="222.50"></text></g><g><title>_ixs (pandas/core/frame.py:3714) (99 samples, 1.17%)</title><rect x="0.7421%" y="196" width="1.1662%" height="15" fill="rgb(222,207,29)" fg:x="63" fg:w="99"/><text x="0.9921%" y="206.50"></text></g><g><title>__init__ (pandas/core/series.py:360) (29 samples, 0.34%)</title><rect x="2.1086%" y="212" width="0.3416%" height="15" fill="rgb(206,96,30)" fg:x="179" fg:w="29"/><text x="2.3586%" y="222.50"></text></g><g><title>__init__ (pandas/core/generic.py:276) (27 samples, 0.32%)</title><rect x="2.1322%" y="228" width="0.3181%" height="15" fill="rgb(218,138,4)" fg:x="181" fg:w="27"/><text x="2.3822%" y="238.50"></text></g><g><title>__init__ (pandas/core/flags.py:51) (26 samples, 0.31%)</title><rect x="2.1440%" y="244" width="0.3063%" height="15" fill="rgb(250,191,14)" fg:x="182" fg:w="26"/><text x="2.3940%" y="254.50"></text></g><g><title>_ixs (pandas/core/frame.py:3718) (56 samples, 0.66%)</title><rect x="1.9201%" y="196" width="0.6597%" height="15" fill="rgb(239,60,40)" fg:x="163" fg:w="56"/><text x="2.1701%" y="206.50"></text></g><g><title>__init__ (pandas/core/series.py:365) (11 samples, 0.13%)</title><rect x="2.4502%" y="212" width="0.1296%" height="15" fill="rgb(206,27,48)" fg:x="208" fg:w="11"/><text x="2.7002%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1074) (173 samples, 2.04%)</title><rect x="0.6008%" y="164" width="2.0379%" height="15" fill="rgb(225,35,8)" fg:x="51" fg:w="173"/><text x="0.8508%" y="174.50">_..</text></g><g><title>_getitem_axis (pandas/core/indexing.py:1628) (161 samples, 1.90%)</title><rect x="0.7421%" y="180" width="1.8966%" height="15" fill="rgb(250,213,24)" fg:x="63" fg:w="161"/><text x="0.9921%" y="190.50">_..</text></g><g><title>&lt;listcomp&gt; (realkd/search.py:258) (177 samples, 2.09%)</title><rect x="0.5654%" y="148" width="2.0851%" height="15" fill="rgb(247,123,22)" fg:x="48" fg:w="177"/><text x="0.8154%" y="158.50">&lt;..</text></g><g><title>__call__ (realkd/logic.py:142) (12 samples, 0.14%)</title><rect x="5.9135%" y="196" width="0.1414%" height="15" fill="rgb(231,138,38)" fg:x="502" fg:w="12"/><text x="6.1635%" y="206.50"></text></g><g><title>__call__ (realkd/logic.py:37) (200 samples, 2.36%)</title><rect x="9.8834%" y="212" width="2.3560%" height="15" fill="rgb(231,145,46)" fg:x="839" fg:w="200"/><text x="10.1334%" y="222.50">_..</text></g><g><title>&lt;lambda&gt; (realkd/logic.py:63) (52 samples, 0.61%)</title><rect x="11.6268%" y="228" width="0.6126%" height="15" fill="rgb(251,118,11)" fg:x="987" fg:w="52"/><text x="11.8768%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2654) (9 samples, 0.11%)</title><rect x="13.5469%" y="228" width="0.1060%" height="15" fill="rgb(217,147,25)" fg:x="1150" fg:w="9"/><text x="13.7969%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2655) (84 samples, 0.99%)</title><rect x="13.6530%" y="228" width="0.9895%" height="15" fill="rgb(247,81,37)" fg:x="1159" fg:w="84"/><text x="13.9030%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2656) (44 samples, 0.52%)</title><rect x="14.6425%" y="228" width="0.5183%" height="15" fill="rgb(209,12,38)" fg:x="1243" fg:w="44"/><text x="14.8925%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2665) (9 samples, 0.11%)</title><rect x="15.1608%" y="228" width="0.1060%" height="15" fill="rgb(227,1,9)" fg:x="1287" fg:w="9"/><text x="15.4108%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2666) (68 samples, 0.80%)</title><rect x="15.2668%" y="228" width="0.8010%" height="15" fill="rgb(248,47,43)" fg:x="1296" fg:w="68"/><text x="15.5168%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2667) (58 samples, 0.68%)</title><rect x="16.0679%" y="228" width="0.6832%" height="15" fill="rgb(221,10,30)" fg:x="1364" fg:w="58"/><text x="16.3179%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/series.py:968) (404 samples, 4.76%)</title><rect x="12.2865%" y="212" width="4.7591%" height="15" fill="rgb(210,229,1)" fg:x="1043" fg:w="404"/><text x="12.5365%" y="222.50">__geti..</text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2670) (25 samples, 0.29%)</title><rect x="16.7511%" y="228" width="0.2945%" height="15" fill="rgb(222,148,37)" fg:x="1422" fg:w="25"/><text x="17.0011%" y="238.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:363) (49 samples, 0.58%)</title><rect x="19.5665%" y="228" width="0.5772%" height="15" fill="rgb(234,67,33)" fg:x="1661" fg:w="49"/><text x="19.8165%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/series.py:969) (271 samples, 3.19%)</title><rect x="17.0456%" y="212" width="3.1924%" height="15" fill="rgb(247,98,35)" fg:x="1447" fg:w="271"/><text x="17.2956%" y="222.50">__g..</text></g><g><title>__getitem__ (pandas/core/series.py:971) (26 samples, 0.31%)</title><rect x="20.2380%" y="212" width="0.3063%" height="15" fill="rgb(247,138,52)" fg:x="1718" fg:w="26"/><text x="20.4880%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/series.py:974) (52 samples, 0.61%)</title><rect x="20.5442%" y="212" width="0.6126%" height="15" fill="rgb(213,79,30)" fg:x="1744" fg:w="52"/><text x="20.7942%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/series.py:975) (125 samples, 1.47%)</title><rect x="21.1568%" y="212" width="1.4725%" height="15" fill="rgb(246,177,23)" fg:x="1796" fg:w="125"/><text x="21.4068%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/series.py:978) (38 samples, 0.45%)</title><rect x="22.6293%" y="212" width="0.4476%" height="15" fill="rgb(230,62,27)" fg:x="1921" fg:w="38"/><text x="22.8793%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/series.py:981) (9 samples, 0.11%)</title><rect x="23.0769%" y="212" width="0.1060%" height="15" fill="rgb(216,154,8)" fg:x="1959" fg:w="9"/><text x="23.3269%" y="222.50"></text></g><g><title>_get_value (pandas/core/series.py:1088) (21 samples, 0.25%)</title><rect x="26.8112%" y="228" width="0.2474%" height="15" fill="rgb(244,35,45)" fg:x="2276" fg:w="21"/><text x="27.0612%" y="238.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3792) (26 samples, 0.31%)</title><rect x="31.9354%" y="244" width="0.3063%" height="15" fill="rgb(251,115,12)" fg:x="2711" fg:w="26"/><text x="32.1854%" y="254.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3793) (10 samples, 0.12%)</title><rect x="32.2417%" y="244" width="0.1178%" height="15" fill="rgb(240,54,50)" fg:x="2737" fg:w="10"/><text x="32.4917%" y="254.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3798) (116 samples, 1.37%)</title><rect x="32.3595%" y="244" width="1.3665%" height="15" fill="rgb(233,84,52)" fg:x="2747" fg:w="116"/><text x="32.6095%" y="254.50"></text></g><g><title>_maybe_cast_indexer (pandas/core/indexes/base.py:6612) (13 samples, 0.15%)</title><rect x="33.5729%" y="260" width="0.1531%" height="15" fill="rgb(207,117,47)" fg:x="2850" fg:w="13"/><text x="33.8229%" y="270.50"></text></g><g><title>_get_value (pandas/core/series.py:1092) (1,019 samples, 12.00%)</title><rect x="27.0585%" y="228" width="12.0038%" height="15" fill="rgb(249,43,39)" fg:x="2297" fg:w="1019"/><text x="27.3085%" y="238.50">_get_value (pandas..</text></g><g><title>get_loc (pandas/core/indexes/base.py:3800) (447 samples, 5.27%)</title><rect x="33.7967%" y="244" width="5.2656%" height="15" fill="rgb(209,38,44)" fg:x="2869" fg:w="447"/><text x="34.0467%" y="254.50">get_lo..</text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5981) (62 samples, 0.73%)</title><rect x="42.2782%" y="244" width="0.7304%" height="15" fill="rgb(236,212,23)" fg:x="3589" fg:w="62"/><text x="42.5282%" y="254.50"></text></g><g><title>__init__ (realkd/search.py:267) (4,113 samples, 48.45%)</title><rect x="2.6505%" y="148" width="48.4509%" height="15" fill="rgb(242,79,21)" fg:x="225" fg:w="4113"/><text x="2.9005%" y="158.50">__init__ (realkd/search.py:267)</text></g><g><title>&lt;listcomp&gt; (realkd/search.py:267) (4,113 samples, 48.45%)</title><rect x="2.6505%" y="164" width="48.4509%" height="15" fill="rgb(211,96,35)" fg:x="225" fg:w="4113"/><text x="2.9005%" y="174.50">&lt;listcomp&gt; (realkd/search.py:267)</text></g><g><title>&lt;listcomp&gt; (realkd/search.py:267) (4,101 samples, 48.31%)</title><rect x="2.7918%" y="180" width="48.3096%" height="15" fill="rgb(253,215,40)" fg:x="237" fg:w="4101"/><text x="3.0418%" y="190.50">&lt;listcomp&gt; (realkd/search.py:267)</text></g><g><title>__call__ (realkd/logic.py:143) (3,824 samples, 45.05%)</title><rect x="6.0549%" y="196" width="45.0465%" height="15" fill="rgb(211,81,21)" fg:x="514" fg:w="3824"/><text x="6.3049%" y="206.50">__call__ (realkd/logic.py:143)</text></g><g><title>__getitem__ (pandas/core/series.py:982) (2,370 samples, 27.92%)</title><rect x="23.1829%" y="212" width="27.9185%" height="15" fill="rgb(208,190,38)" fg:x="1968" fg:w="2370"/><text x="23.4329%" y="222.50">__getitem__ (pandas/core/series.py:982)</text></g><g><title>_get_value (pandas/core/series.py:1093) (1,022 samples, 12.04%)</title><rect x="39.0623%" y="228" width="12.0391%" height="15" fill="rgb(235,213,38)" fg:x="3316" fg:w="1022"/><text x="39.3123%" y="238.50">_get_value (pandas..</text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5982) (687 samples, 8.09%)</title><rect x="43.0086%" y="244" width="8.0928%" height="15" fill="rgb(237,122,38)" fg:x="3651" fg:w="687"/><text x="43.2586%" y="254.50">_get_values..</text></g><g><title>_values (pandas/core/series.py:741) (385 samples, 4.54%)</title><rect x="46.5661%" y="260" width="4.5353%" height="15" fill="rgb(244,218,35)" fg:x="3953" fg:w="385"/><text x="46.8161%" y="270.50">_valu..</text></g><g><title>internal_values (pandas/core/internals/managers.py:2040) (222 samples, 2.62%)</title><rect x="48.4863%" y="276" width="2.6151%" height="15" fill="rgb(240,68,47)" fg:x="4116" fg:w="222"/><text x="48.7363%" y="286.50">in..</text></g><g><title>__call__ (realkd/logic.py:37) (184 samples, 2.17%)</title><rect x="58.9351%" y="212" width="2.1675%" height="15" fill="rgb(210,16,53)" fg:x="5003" fg:w="184"/><text x="59.1851%" y="222.50">_..</text></g><g><title>&lt;lambda&gt; (realkd/logic.py:63) (42 samples, 0.49%)</title><rect x="60.6078%" y="228" width="0.4948%" height="15" fill="rgb(235,124,12)" fg:x="5145" fg:w="42"/><text x="60.8578%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2655) (65 samples, 0.77%)</title><rect x="62.9638%" y="228" width="0.7657%" height="15" fill="rgb(224,169,11)" fg:x="5345" fg:w="65"/><text x="63.2138%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2656) (43 samples, 0.51%)</title><rect x="63.7295%" y="228" width="0.5065%" height="15" fill="rgb(250,166,2)" fg:x="5410" fg:w="43"/><text x="63.9795%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2666) (80 samples, 0.94%)</title><rect x="64.3067%" y="228" width="0.9424%" height="15" fill="rgb(242,216,29)" fg:x="5459" fg:w="80"/><text x="64.5567%" y="238.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2667) (58 samples, 0.68%)</title><rect x="65.2491%" y="228" width="0.6832%" height="15" fill="rgb(230,116,27)" fg:x="5539" fg:w="58"/><text x="65.4991%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/series.py:968) (436 samples, 5.14%)</title><rect x="61.1026%" y="212" width="5.1361%" height="15" fill="rgb(228,99,48)" fg:x="5187" fg:w="436"/><text x="61.3526%" y="222.50">__geti..</text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2670) (26 samples, 0.31%)</title><rect x="65.9324%" y="228" width="0.3063%" height="15" fill="rgb(253,11,6)" fg:x="5597" fg:w="26"/><text x="66.1824%" y="238.50"></text></g><g><title>apply_if_callable (pandas/core/common.py:363) (41 samples, 0.48%)</title><rect x="68.6653%" y="228" width="0.4830%" height="15" fill="rgb(247,143,39)" fg:x="5829" fg:w="41"/><text x="68.9153%" y="238.50"></text></g><g><title>__getitem__ (pandas/core/series.py:969) (250 samples, 2.94%)</title><rect x="66.2387%" y="212" width="2.9450%" height="15" fill="rgb(236,97,10)" fg:x="5623" fg:w="250"/><text x="66.4887%" y="222.50">__..</text></g><g><title>__getitem__ (pandas/core/series.py:971) (36 samples, 0.42%)</title><rect x="69.1836%" y="212" width="0.4241%" height="15" fill="rgb(233,208,19)" fg:x="5873" fg:w="36"/><text x="69.4336%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/series.py:974) (42 samples, 0.49%)</title><rect x="69.6077%" y="212" width="0.4948%" height="15" fill="rgb(216,164,2)" fg:x="5909" fg:w="42"/><text x="69.8577%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/series.py:975) (126 samples, 1.48%)</title><rect x="70.1025%" y="212" width="1.4843%" height="15" fill="rgb(220,129,5)" fg:x="5951" fg:w="126"/><text x="70.3525%" y="222.50"></text></g><g><title>__getitem__ (pandas/core/series.py:978) (42 samples, 0.49%)</title><rect x="71.5868%" y="212" width="0.4948%" height="15" fill="rgb(242,17,10)" fg:x="6077" fg:w="42"/><text x="71.8368%" y="222.50"></text></g><g><title>_get_value (pandas/core/series.py:1088) (18 samples, 0.21%)</title><rect x="75.1443%" y="228" width="0.2120%" height="15" fill="rgb(242,107,0)" fg:x="6379" fg:w="18"/><text x="75.3943%" y="238.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3792) (26 samples, 0.31%)</title><rect x="80.3157%" y="244" width="0.3063%" height="15" fill="rgb(251,28,31)" fg:x="6818" fg:w="26"/><text x="80.5657%" y="254.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3793) (12 samples, 0.14%)</title><rect x="80.6220%" y="244" width="0.1414%" height="15" fill="rgb(233,223,10)" fg:x="6844" fg:w="12"/><text x="80.8720%" y="254.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3798) (114 samples, 1.34%)</title><rect x="80.7633%" y="244" width="1.3429%" height="15" fill="rgb(215,21,27)" fg:x="6856" fg:w="114"/><text x="81.0133%" y="254.50"></text></g><g><title>get_loc (pandas/core/indexes/base.py:3799) (11 samples, 0.13%)</title><rect x="82.1063%" y="244" width="0.1296%" height="15" fill="rgb(232,23,21)" fg:x="6970" fg:w="11"/><text x="82.3563%" y="254.50"></text></g><g><title>_get_value (pandas/core/series.py:1092) (984 samples, 11.59%)</title><rect x="75.3563%" y="228" width="11.5915%" height="15" fill="rgb(244,5,23)" fg:x="6397" fg:w="984"/><text x="75.6063%" y="238.50">_get_value (panda..</text></g><g><title>get_loc (pandas/core/indexes/base.py:3800) (400 samples, 4.71%)</title><rect x="82.2358%" y="244" width="4.7120%" height="15" fill="rgb(226,81,46)" fg:x="6981" fg:w="400"/><text x="82.4858%" y="254.50">get_l..</text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5981) (47 samples, 0.55%)</title><rect x="89.7750%" y="244" width="0.5537%" height="15" fill="rgb(247,70,30)" fg:x="7621" fg:w="47"/><text x="90.0250%" y="254.50"></text></g><g><title>search (realkd/rules.py:422) (8,292 samples, 97.68%)</title><rect x="0.5654%" y="116" width="97.6793%" height="15" fill="rgb(212,68,19)" fg:x="48" fg:w="8292"/><text x="0.8154%" y="126.50">search (realkd/rules.py:422)</text></g><g><title>from_df (realkd/search.py:258) (8,292 samples, 97.68%)</title><rect x="0.5654%" y="132" width="97.6793%" height="15" fill="rgb(240,187,13)" fg:x="48" fg:w="8292"/><text x="0.8154%" y="142.50">from_df (realkd/search.py:258)</text></g><g><title>__init__ (realkd/search.py:268) (4,002 samples, 47.14%)</title><rect x="51.1014%" y="148" width="47.1434%" height="15" fill="rgb(223,113,26)" fg:x="4338" fg:w="4002"/><text x="51.3514%" y="158.50">__init__ (realkd/search.py:268)</text></g><g><title>&lt;listcomp&gt; (realkd/search.py:268) (4,002 samples, 47.14%)</title><rect x="51.1014%" y="164" width="47.1434%" height="15" fill="rgb(206,192,2)" fg:x="4338" fg:w="4002"/><text x="51.3514%" y="174.50">&lt;listcomp&gt; (realkd/search.py:268)</text></g><g><title>&lt;listcomp&gt; (realkd/search.py:268) (3,993 samples, 47.04%)</title><rect x="51.2074%" y="180" width="47.0373%" height="15" fill="rgb(241,108,4)" fg:x="4347" fg:w="3993"/><text x="51.4574%" y="190.50">&lt;listcomp&gt; (realkd/search.py:268)</text></g><g><title>__call__ (realkd/logic.py:143) (3,698 samples, 43.56%)</title><rect x="54.6825%" y="196" width="43.5623%" height="15" fill="rgb(247,173,49)" fg:x="4642" fg:w="3698"/><text x="54.9325%" y="206.50">__call__ (realkd/logic.py:143)</text></g><g><title>__getitem__ (pandas/core/series.py:982) (2,213 samples, 26.07%)</title><rect x="72.1758%" y="212" width="26.0690%" height="15" fill="rgb(224,114,35)" fg:x="6127" fg:w="2213"/><text x="72.4258%" y="222.50">__getitem__ (pandas/core/series.py:982)</text></g><g><title>_get_value (pandas/core/series.py:1093) (959 samples, 11.30%)</title><rect x="86.9478%" y="228" width="11.2970%" height="15" fill="rgb(245,159,27)" fg:x="7381" fg:w="959"/><text x="87.1978%" y="238.50">_get_value (panda..</text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5982) (672 samples, 7.92%)</title><rect x="90.3287%" y="244" width="7.9161%" height="15" fill="rgb(245,172,44)" fg:x="7668" fg:w="672"/><text x="90.5787%" y="254.50">_get_values..</text></g><g><title>_values (pandas/core/series.py:741) (351 samples, 4.13%)</title><rect x="94.1100%" y="260" width="4.1348%" height="15" fill="rgb(236,23,11)" fg:x="7989" fg:w="351"/><text x="94.3600%" y="270.50">_valu..</text></g><g><title>internal_values (pandas/core/internals/managers.py:2040) (185 samples, 2.18%)</title><rect x="96.0655%" y="276" width="2.1793%" height="15" fill="rgb(205,117,38)" fg:x="8155" fg:w="185"/><text x="96.3155%" y="286.50">i..</text></g><g><title>&lt;module&gt; (test_all.py:16) (8,299 samples, 97.76%)</title><rect x="0.5183%" y="68" width="97.7618%" height="15" fill="rgb(237,72,25)" fg:x="44" fg:w="8299"/><text x="0.7683%" y="78.50">&lt;module&gt; (test_all.py:16)</text></g><g><title>fit (realkd/rules.py:641) (8,299 samples, 97.76%)</title><rect x="0.5183%" y="84" width="97.7618%" height="15" fill="rgb(244,70,9)" fg:x="44" fg:w="8299"/><text x="0.7683%" y="94.50">fit (realkd/rules.py:641)</text></g><g><title>fit (realkd/rules.py:535) (8,299 samples, 97.76%)</title><rect x="0.5183%" y="100" width="97.7618%" height="15" fill="rgb(217,125,39)" fg:x="44" fg:w="8299"/><text x="0.7683%" y="110.50">fit (realkd/rules.py:535)</text></g><g><title>&lt;module&gt; (scipy/stats/_stats_py.py:46) (16 samples, 0.19%)</title><rect x="98.4215%" y="788" width="0.1885%" height="15" fill="rgb(235,36,10)" fg:x="8355" fg:w="16"/><text x="98.6715%" y="798.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (16 samples, 0.19%)</title><rect x="98.4215%" y="804" width="0.1885%" height="15" fill="rgb(251,123,47)" fg:x="8355" fg:w="16"/><text x="98.6715%" y="814.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 0.19%)</title><rect x="98.4215%" y="820" width="0.1885%" height="15" fill="rgb(221,13,13)" fg:x="8355" fg:w="16"/><text x="98.6715%" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (16 samples, 0.19%)</title><rect x="98.4215%" y="836" width="0.1885%" height="15" fill="rgb(238,131,9)" fg:x="8355" fg:w="16"/><text x="98.6715%" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (16 samples, 0.19%)</title><rect x="98.4215%" y="852" width="0.1885%" height="15" fill="rgb(211,50,8)" fg:x="8355" fg:w="16"/><text x="98.6715%" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (16 samples, 0.19%)</title><rect x="98.4215%" y="868" width="0.1885%" height="15" fill="rgb(245,182,24)" fg:x="8355" fg:w="16"/><text x="98.6715%" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (16 samples, 0.19%)</title><rect x="98.4215%" y="884" width="0.1885%" height="15" fill="rgb(242,14,37)" fg:x="8355" fg:w="16"/><text x="98.6715%" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 0.19%)</title><rect x="98.4215%" y="900" width="0.1885%" height="15" fill="rgb(246,228,12)" fg:x="8355" fg:w="16"/><text x="98.6715%" y="910.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:467) (22 samples, 0.26%)</title><rect x="98.3861%" y="692" width="0.2592%" height="15" fill="rgb(213,55,15)" fg:x="8352" fg:w="22"/><text x="98.6361%" y="702.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (22 samples, 0.26%)</title><rect x="98.3861%" y="708" width="0.2592%" height="15" fill="rgb(209,9,3)" fg:x="8352" fg:w="22"/><text x="98.6361%" y="718.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (22 samples, 0.26%)</title><rect x="98.3861%" y="724" width="0.2592%" height="15" fill="rgb(230,59,30)" fg:x="8352" fg:w="22"/><text x="98.6361%" y="734.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (22 samples, 0.26%)</title><rect x="98.3861%" y="740" width="0.2592%" height="15" fill="rgb(209,121,21)" fg:x="8352" fg:w="22"/><text x="98.6361%" y="750.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (22 samples, 0.26%)</title><rect x="98.3861%" y="756" width="0.2592%" height="15" fill="rgb(220,109,13)" fg:x="8352" fg:w="22"/><text x="98.6361%" y="766.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 0.26%)</title><rect x="98.3861%" y="772" width="0.2592%" height="15" fill="rgb(232,18,1)" fg:x="8352" fg:w="22"/><text x="98.6361%" y="782.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:19) (26 samples, 0.31%)</title><rect x="98.3861%" y="596" width="0.3063%" height="15" fill="rgb(215,41,42)" fg:x="8352" fg:w="26"/><text x="98.6361%" y="606.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (26 samples, 0.31%)</title><rect x="98.3861%" y="612" width="0.3063%" height="15" fill="rgb(224,123,36)" fg:x="8352" fg:w="26"/><text x="98.6361%" y="622.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (26 samples, 0.31%)</title><rect x="98.3861%" y="628" width="0.3063%" height="15" fill="rgb(240,125,3)" fg:x="8352" fg:w="26"/><text x="98.6361%" y="638.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (26 samples, 0.31%)</title><rect x="98.3861%" y="644" width="0.3063%" height="15" fill="rgb(205,98,50)" fg:x="8352" fg:w="26"/><text x="98.6361%" y="654.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (26 samples, 0.31%)</title><rect x="98.3861%" y="660" width="0.3063%" height="15" fill="rgb(205,185,37)" fg:x="8352" fg:w="26"/><text x="98.6361%" y="670.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (26 samples, 0.31%)</title><rect x="98.3861%" y="676" width="0.3063%" height="15" fill="rgb(238,207,15)" fg:x="8352" fg:w="26"/><text x="98.6361%" y="686.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:29) (27 samples, 0.32%)</title><rect x="98.3861%" y="500" width="0.3181%" height="15" fill="rgb(213,199,42)" fg:x="8352" fg:w="27"/><text x="98.6361%" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (27 samples, 0.32%)</title><rect x="98.3861%" y="516" width="0.3181%" height="15" fill="rgb(235,201,11)" fg:x="8352" fg:w="27"/><text x="98.6361%" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (27 samples, 0.32%)</title><rect x="98.3861%" y="532" width="0.3181%" height="15" fill="rgb(207,46,11)" fg:x="8352" fg:w="27"/><text x="98.6361%" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (27 samples, 0.32%)</title><rect x="98.3861%" y="548" width="0.3181%" height="15" fill="rgb(241,35,35)" fg:x="8352" fg:w="27"/><text x="98.6361%" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (27 samples, 0.32%)</title><rect x="98.3861%" y="564" width="0.3181%" height="15" fill="rgb(243,32,47)" fg:x="8352" fg:w="27"/><text x="98.6361%" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (27 samples, 0.32%)</title><rect x="98.3861%" y="580" width="0.3181%" height="15" fill="rgb(247,202,23)" fg:x="8352" fg:w="27"/><text x="98.6361%" y="590.50"></text></g><g><title>&lt;module&gt; (test_all.py:2) (37 samples, 0.44%)</title><rect x="98.2801%" y="68" width="0.4359%" height="15" fill="rgb(219,102,11)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (37 samples, 0.44%)</title><rect x="98.2801%" y="84" width="0.4359%" height="15" fill="rgb(243,110,44)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (37 samples, 0.44%)</title><rect x="98.2801%" y="100" width="0.4359%" height="15" fill="rgb(222,74,54)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (37 samples, 0.44%)</title><rect x="98.2801%" y="116" width="0.4359%" height="15" fill="rgb(216,99,12)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (37 samples, 0.44%)</title><rect x="98.2801%" y="132" width="0.4359%" height="15" fill="rgb(226,22,26)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (37 samples, 0.44%)</title><rect x="98.2801%" y="148" width="0.4359%" height="15" fill="rgb(217,163,10)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="158.50"></text></g><g><title>&lt;module&gt; (realkd/rules.py:10) (37 samples, 0.44%)</title><rect x="98.2801%" y="164" width="0.4359%" height="15" fill="rgb(213,25,53)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (37 samples, 0.44%)</title><rect x="98.2801%" y="180" width="0.4359%" height="15" fill="rgb(252,105,26)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:961) (37 samples, 0.44%)</title><rect x="98.2801%" y="196" width="0.4359%" height="15" fill="rgb(220,39,43)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="206.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (37 samples, 0.44%)</title><rect x="98.2801%" y="212" width="0.4359%" height="15" fill="rgb(229,68,48)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="222.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (37 samples, 0.44%)</title><rect x="98.2801%" y="228" width="0.4359%" height="15" fill="rgb(252,8,32)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="238.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (37 samples, 0.44%)</title><rect x="98.2801%" y="244" width="0.4359%" height="15" fill="rgb(223,20,43)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="254.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (37 samples, 0.44%)</title><rect x="98.2801%" y="260" width="0.4359%" height="15" fill="rgb(229,81,49)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="270.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (37 samples, 0.44%)</title><rect x="98.2801%" y="276" width="0.4359%" height="15" fill="rgb(236,28,36)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (37 samples, 0.44%)</title><rect x="98.2801%" y="292" width="0.4359%" height="15" fill="rgb(249,185,26)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="302.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:82) (37 samples, 0.44%)</title><rect x="98.2801%" y="308" width="0.4359%" height="15" fill="rgb(249,174,33)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (37 samples, 0.44%)</title><rect x="98.2801%" y="324" width="0.4359%" height="15" fill="rgb(233,201,37)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (37 samples, 0.44%)</title><rect x="98.2801%" y="340" width="0.4359%" height="15" fill="rgb(221,78,26)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="350.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (37 samples, 0.44%)</title><rect x="98.2801%" y="356" width="0.4359%" height="15" fill="rgb(250,127,30)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="366.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (37 samples, 0.44%)</title><rect x="98.2801%" y="372" width="0.4359%" height="15" fill="rgb(230,49,44)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (37 samples, 0.44%)</title><rect x="98.2801%" y="388" width="0.4359%" height="15" fill="rgb(229,67,23)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="398.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:17) (37 samples, 0.44%)</title><rect x="98.2801%" y="404" width="0.4359%" height="15" fill="rgb(249,83,47)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (37 samples, 0.44%)</title><rect x="98.2801%" y="420" width="0.4359%" height="15" fill="rgb(215,43,3)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (37 samples, 0.44%)</title><rect x="98.2801%" y="436" width="0.4359%" height="15" fill="rgb(238,154,13)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (37 samples, 0.44%)</title><rect x="98.2801%" y="452" width="0.4359%" height="15" fill="rgb(219,56,2)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:848) (37 samples, 0.44%)</title><rect x="98.2801%" y="468" width="0.4359%" height="15" fill="rgb(233,0,4)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (37 samples, 0.44%)</title><rect x="98.2801%" y="484" width="0.4359%" height="15" fill="rgb(235,30,7)" fg:x="8343" fg:w="37"/><text x="98.5301%" y="494.50"></text></g><g><title>read (pandas/io/parsers/c_parser_wrapper.py:243) (99 samples, 1.17%)</title><rect x="98.7160%" y="164" width="1.1662%" height="15" fill="rgb(250,79,13)" fg:x="8380" fg:w="99"/><text x="98.9660%" y="174.50"></text></g><g><title>read (pandas/io/parsers/readers.py:1772) (104 samples, 1.23%)</title><rect x="98.7160%" y="148" width="1.2251%" height="15" fill="rgb(211,146,34)" fg:x="8380" fg:w="104"/><text x="98.9660%" y="158.50"></text></g><g><title>all (8,489 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="8489"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (test_all.py:8) (109 samples, 1.28%)</title><rect x="98.7160%" y="68" width="1.2840%" height="15" fill="rgb(235,168,5)" fg:x="8380" fg:w="109"/><text x="98.9660%" y="78.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:211) (109 samples, 1.28%)</title><rect x="98.7160%" y="84" width="1.2840%" height="15" fill="rgb(221,155,16)" fg:x="8380" fg:w="109"/><text x="98.9660%" y="94.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:317) (109 samples, 1.28%)</title><rect x="98.7160%" y="100" width="1.2840%" height="15" fill="rgb(215,215,53)" fg:x="8380" fg:w="109"/><text x="98.9660%" y="110.50"></text></g><g><title>read_csv (pandas/io/parsers/readers.py:950) (109 samples, 1.28%)</title><rect x="98.7160%" y="116" width="1.2840%" height="15" fill="rgb(223,4,10)" fg:x="8380" fg:w="109"/><text x="98.9660%" y="126.50"></text></g><g><title>_read (pandas/io/parsers/readers.py:611) (109 samples, 1.28%)</title><rect x="98.7160%" y="132" width="1.2840%" height="15" fill="rgb(234,103,6)" fg:x="8380" fg:w="109"/><text x="98.9660%" y="142.50"></text></g></svg></svg>